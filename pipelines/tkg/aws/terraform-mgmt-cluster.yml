resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ((terraform_resource_with_tkg_image))
    tag: latest
    username: ((registry_username))
    password: ((registry_password))

- name: s3-resource
  type: docker-image
  source:
    repository: concourse/s3-resource
    tag: 1.1.0

resources:
# The repo that contains Terraform
- name: pipeline-repo
  type: git
  icon: github
  source:
    uri: ((pipeline_repo))
    branch: ((pipeline_repo_branch))

- name: terraform-state
  type: terraform
  source:
    env_name: ((environment_name))
    backend_type: s3
    backend_config:
      bucket: tf4k8s-pipelines-state-((uid))
      key: ((environment_name))/terraform/((s3_bucket_folder))/terraform.tfstate
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
      region: ((aws_region))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

- name: terraform-vars
  type: s3-resource
  source:
    access_key_id: ((aws_access_key))
    secret_access_key: ((aws_secret_key))
    region_name: ((aws_region))
    bucket: tf4k8s-pipelines-config-((uid))
    versioned_file: ((environment_name))/terraform/((s3_bucket_folder))/terraform.tfvars

- name: tkg-config
  type: s3-resource
  source:
    access_key_id: ((aws_access_key))
    secret_access_key: ((aws_secret_key))
    region_name: ((aws_region))
    bucket: s3cr3ts-((uid))
    versioned_file: ((environment_name))/.tkg/config.yaml

- name: kind-release
  type: github-release
  source:
    owner: kubernetes-sigs
    repository: kind

- name: kind-on-c
  type: git
  source:
    uri: https://github.com/pivotal-k8s/kind-on-c

jobs:
- name: terraform-plan
  plan:
  - get: pipeline-repo
    trigger: true
  - get: terraform-vars
    trigger: true
  - put: terraform-state
    params:
      terraform_source: pipeline-repo/terraform/((terraform_module))
      plan_only: true
      var_files: [terraform-vars/terraform.tfvars]
  on_failure:
    do:
      - put: fly
        params:
          options: trigger-job -j ((current_pipeline_name))/terraform-plan
        
- name: terraform-apply
  plan:
  - get: pipeline-repo
    trigger: false
    passed: [terraform-plan]
  - get: terraform-state
    trigger: false
    passed: [terraform-plan]
  - put: terraform-state
    params:
      terraform_source: pipeline-repo/terraform/((terraform_module))
      plan_run: true

- name: store-tkg-config
  plan:
  - get: terraform-state
    trigger: true
    passed: [terraform-apply]
  - get: tkg-config
    trigger: false
  - task: get-cluster-credentials
    config:
      inputs:
        - name: terraform-state
        - name: tkg-config
      outputs:
        - name: tkg-config
      platform: linux
      image_resource:
        type: registry-image
        source: { repository: dwdraju/alpine-curl-jq }
      run:
        path: sh
        args:
        - -exc
        - |
          cat terraform-state/metadata | jq -r '.config_yaml_contents' > tkg-config/config.yaml
  - put: tkg-config
    params:
      file: tkg-config/config.yaml

- name: create-management-cluster
  plan:
  - get: pipeline-repo
  - get: tkg-config
    trigger: true
    passed: [store-tkg-config]
  - get: kind-on-c
  - get: kind-release
    params:
      globs:
      - kind-linux-amd64 
  - task: get-tkg-cli
    file: pipeline-repo/tasks/get-myvmw-product/task.yml
    input_mapping:
      pipeline: pipeline-repo
    output_mapping:
      product: tkg-cli
    params:
      VMWUSER: ((vmw_username))
      VMWPASS: ((vmw_password))
      PRODUCT_CATEGORY: vmware_tanzu_kubernetes_grid
      PRODUCT_VERSION: 1_x
      PRODUCT_FILE_GLOB: tkg-linux-amd64.*.tar.gz
  - task: create-mgmt-cluster-via-kind
    privileged: true
    file: kind-on-c/kind.yaml
    input_mapping:
      inputs: tkg-cli
    output_mapping:
      outputs: tkg-config
    params:
      KIND_TESTS: |
        cd inputs
        tar -xzf *.tar.gz
        for i in $(ls -1 tkg); do
          chmod +x tkg/$i
          mv tkg/$i /usr/local/bin/$( echo $i | cut -d'-' -f1)
        done
        cd ..
        tkg init --infrastructure aws --plan ((tkg_plan)) --name ((tkg_management_cluster_name)) --config tkg-config/config.yaml --use-existing-bootstrap-cluster --v 6
  - put: tkg-config
    params:
      file: tkg-config/config.yaml

- name: delete-management-cluster
  plan:
  - get: pipeline-repo
    trigger: false
  - get: tkg-config
    trigger: false
  - get: kind-on-c
    trigger: false
  - get: kind-release
    trigger: false
    params:
      globs:
      - kind-linux-amd64 
  - task: get-tkg-cli
    file: pipeline-repo/tasks/get-myvmw-product/task.yml
    params:
      VMWUSER: ((vmw_username))
      VMWPASS: ((vmw_password))
      PRODUCT_CATEGORY: vmware_tanzu_kubernetes_grid
      PRODUCT_VERSION: 1_x
      PRODUCT_FILE_GLOB: tkg-linux-amd64.*.tar.gz
    output_mapping:
      product: tkg-cli
  - task: delete-mgmt-cluster-via-kind
    privileged: true
    file: kind-on-c/kind.yaml
    input_mapping:
      inputs: tkg-cli
    output_mapping:
      outputs: tkg-config
    params:
      KIND_TESTS: |
        cd inputs
        tar -xzf *.tar.gz
        for i in $(ls -1 tkg); do
          chmod +x tkg/$i
          mv tkg/$i /usr/local/bin/$( echo $i | cut -d'-' -f1)
        done
        cd ..
        tkg delete management-cluster --name ((tkg_management_cluster_name)) --config tkg-config/config.yaml --use-existing-bootstrap-cluster --v 6

- name: terraform-destroy
  plan:
  - get: pipeline-repo
    trigger: false
  - get: terraform-vars
    trigger: false
  - get: terraform-state
    trigger: false
  - put: terraform-state
    params:
      terraform_source: pipeline-repo/terraform/((terraform_module))
      action: destroy
      var_files: [terraform-vars/terraform.tfvars]
    get_params:
      action: destroy